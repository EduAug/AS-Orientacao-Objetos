// <auto-generated />
using System;
using AS_Orientacao_Objetos.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AS_Orientacao_Objetos.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230622141050_fixedGenreUserOnBook")]
    partial class fixedGenreUserOnBook
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("AS_Orientacao_Objetos.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("CHAR(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("VARCHAR(35)")
                        .HasColumnName("phone");

                    b.Property<string>("WriterLicense")
                        .IsRequired()
                        .HasColumnType("VARCHAR(35)");

                    b.HasKey("Id");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("AS_Orientacao_Objetos.Domain.Entities.AuthorBooks", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("author_books", (string)null);
                });

            modelBuilder.Entity("AS_Orientacao_Objetos.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("DonatorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("donator");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("genre");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("isbn");

                    b.Property<int>("PageTotal")
                        .HasColumnType("INT")
                        .HasColumnName("page_num");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("publishing_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(70)")
                        .HasColumnName("title");

                    b.Property<bool>("isRented")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("is_rented");

                    b.HasKey("Id");

                    b.HasIndex("DonatorId");

                    b.HasIndex("GenreId");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("AS_Orientacao_Objetos.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("AS_Orientacao_Objetos.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("CHAR(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("VARCHAR(35)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AS_Orientacao_Objetos.Domain.Entities.UserBooks", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("rental_date");

                    b.Property<DateTime>("ReturnLimitDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("rental_limit");

                    b.Property<DateTime?>("ReturnedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("returned_on");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("user_books", (string)null);
                });

            modelBuilder.Entity("AS_Orientacao_Objetos.Domain.Entities.AuthorBooks", b =>
                {
                    b.HasOne("AS_Orientacao_Objetos.Domain.Entities.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS_Orientacao_Objetos.Domain.Entities.Book", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("AS_Orientacao_Objetos.Domain.Entities.Book", b =>
                {
                    b.HasOne("AS_Orientacao_Objetos.Domain.Entities.User", "DonatedBy")
                        .WithMany("DonatedBooks")
                        .HasForeignKey("DonatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AS_Orientacao_Objetos.Domain.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DonatedBy");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("AS_Orientacao_Objetos.Domain.Entities.UserBooks", b =>
                {
                    b.HasOne("AS_Orientacao_Objetos.Domain.Entities.Book", "Book")
                        .WithMany("UserBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS_Orientacao_Objetos.Domain.Entities.User", "User")
                        .WithMany("UserBooks")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AS_Orientacao_Objetos.Domain.Entities.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("AS_Orientacao_Objetos.Domain.Entities.Book", b =>
                {
                    b.Navigation("AuthorBooks");

                    b.Navigation("UserBooks");
                });

            modelBuilder.Entity("AS_Orientacao_Objetos.Domain.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("AS_Orientacao_Objetos.Domain.Entities.User", b =>
                {
                    b.Navigation("DonatedBooks");

                    b.Navigation("UserBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
